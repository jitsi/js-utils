name: CI

on:
  push:
    branches: [master, main]
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-node@v6
      with:
        node-version: 24
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-node@v6
      with:
        node-version: 24
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: |
        npm run test:coverage 2>&1 | tee test-output.log
        echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV

    - name: Parse test results
      if: always()
      id: test-results
      run: |
        # Extract test results from web-test-runner output
        # Format: "Chrome: |‚ñà‚ñà‚ñà‚ñà| 7/7 test files | 182 passed, 0 failed"
        if grep -q "passed" test-output.log; then
          PASSED=$(grep -oP '\d+ passed' test-output.log | tail -1 | grep -oP '\d+' || echo "0")
          FAILED=$(grep -oP '\d+ failed' test-output.log | tail -1 | grep -oP '\d+' || echo "0")
          TOTAL=$((PASSED + FAILED))

          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
        else
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi

    - name: Generate test summary
      if: always()
      run: |
        echo "### Test Results üìä" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        PASSED="${{ steps.test-results.outputs.passed }}"
        FAILED="${{ steps.test-results.outputs.failed }}"
        TOTAL="${{ steps.test-results.outputs.total }}"

        if [ "$FAILED" = "0" ] && [ "$TOTAL" != "0" ]; then
          echo "‚úÖ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
        elif [ "$TOTAL" = "0" ]; then
          echo "‚ö†Ô∏è **Could not parse test results**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Some tests failed**" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Total Tests | $TOTAL |" >> $GITHUB_STEP_SUMMARY
        echo "| Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
        echo "| Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY

        exit $TEST_EXIT_CODE

    - name: Create test results check
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const passed = '${{ steps.test-results.outputs.passed }}';
          const failed = '${{ steps.test-results.outputs.failed }}';
          const total = '${{ steps.test-results.outputs.total }}';

          const conclusion = failed === '0' && total !== '0' ? 'success' : (total === '0' ? 'neutral' : 'failure');
          const summary = `${total} tests run, ${passed} passed, ${failed} failed`;

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Test Results',
            head_sha: context.payload.pull_request.head.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: summary,
              summary: summary,
              text: `**Test Execution Summary**\n\n- Total: ${total}\n- Passed: ${passed} ‚úÖ\n- Failed: ${failed} ${failed === '0' ? '‚úÖ' : '‚ùå'}`
            }
          });

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage report as artifact
      if: always()
      uses: actions/upload-artifact@v5
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-node@v6
      with:
        node-version: 24
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build
